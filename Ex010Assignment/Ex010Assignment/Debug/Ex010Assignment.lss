
Ex010Assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000426  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000426  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000426  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000458  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ca2  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000075c  00000000  00000000  000011aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000047e  00000000  00000000  00001906  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  00001d84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045e  00000000  00000000  00001eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006fe  00000000  00000000  00002316  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002a14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 58 01 	call	0x2b0	; 0x2b0 <main>
  88:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <hardwareInitLCD>:
void setCursorLCD(char a, char b)
{
	if(a == 1)
	sendCommand2LCD(0x80 + b);
	else if(a == 2)
	sendCommand2LCD(0xC0 + b);
  90:	84 b1       	in	r24, 0x04	; 4
  92:	8c 60       	ori	r24, 0x0C	; 12
  94:	84 b9       	out	0x04, r24	; 4
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	8a b9       	out	0x0a, r24	; 10
  9a:	08 95       	ret

0000009c <push2LED>:
  9c:	2a 9a       	sbi	0x05, 2	; 5
  9e:	8f e9       	ldi	r24, 0x9F	; 159
  a0:	9f e0       	ldi	r25, 0x0F	; 15
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <push2LED+0x6>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <push2LED+0xc>
  a8:	00 00       	nop
  aa:	2a 98       	cbi	0x05, 2	; 5
  ac:	8f e9       	ldi	r24, 0x9F	; 159
  ae:	9f e0       	ldi	r25, 0x0F	; 15
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <push2LED+0x14>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <push2LED+0x1a>
  b6:	00 00       	nop
  b8:	08 95       	ret

000000ba <sendCommand2LCD>:
  ba:	8b b9       	out	0x0b, r24	; 11
  bc:	2b 98       	cbi	0x05, 3	; 5
  be:	0e 94 4e 00 	call	0x9c	; 0x9c <push2LED>
  c2:	1b b8       	out	0x0b, r1	; 11
  c4:	08 95       	ret

000000c6 <sendData2LCD>:
  c6:	8b b9       	out	0x0b, r24	; 11
  c8:	2b 9a       	sbi	0x05, 3	; 5
  ca:	0e 94 4e 00 	call	0x9c	; 0x9c <push2LED>
  ce:	1b b8       	out	0x0b, r1	; 11
  d0:	08 95       	ret

000000d2 <displayValue>:
  d2:	cf 92       	push	r12
  d4:	df 92       	push	r13
  d6:	ef 92       	push	r14
  d8:	ff 92       	push	r15
  da:	0f 93       	push	r16
  dc:	1f 93       	push	r17
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	ac 01       	movw	r20, r24
  e4:	cc 24       	eor	r12, r12
  e6:	c3 94       	inc	r12
  e8:	d1 2c       	mov	r13, r1
  ea:	80 36       	cpi	r24, 0x60	; 96
  ec:	9a 4e       	sbci	r25, 0xEA	; 234
  ee:	10 f4       	brcc	.+4      	; 0xf4 <displayValue+0x22>
  f0:	c1 2c       	mov	r12, r1
  f2:	d1 2c       	mov	r13, r1
  f4:	9a 01       	movw	r18, r20
  f6:	36 95       	lsr	r19
  f8:	27 95       	ror	r18
  fa:	36 95       	lsr	r19
  fc:	27 95       	ror	r18
  fe:	36 95       	lsr	r19
 100:	27 95       	ror	r18
 102:	a5 ec       	ldi	r26, 0xC5	; 197
 104:	b0 e2       	ldi	r27, 0x20	; 32
 106:	0e 94 b4 01 	call	0x368	; 0x368 <__umulhisi3>
 10a:	92 95       	swap	r25
 10c:	82 95       	swap	r24
 10e:	8f 70       	andi	r24, 0x0F	; 15
 110:	89 27       	eor	r24, r25
 112:	9f 70       	andi	r25, 0x0F	; 15
 114:	89 27       	eor	r24, r25
 116:	64 ec       	ldi	r22, 0xC4	; 196
 118:	86 01       	movw	r16, r12
 11a:	60 03       	mulsu	r22, r16
 11c:	90 01       	movw	r18, r0
 11e:	61 9f       	mul	r22, r17
 120:	30 0d       	add	r19, r0
 122:	11 24       	eor	r1, r1
 124:	7c 01       	movw	r14, r24
 126:	e2 0e       	add	r14, r18
 128:	f3 1e       	adc	r15, r19
 12a:	88 e1       	ldi	r24, 0x18	; 24
 12c:	9c ef       	ldi	r25, 0xFC	; 252
 12e:	c8 9e       	mul	r12, r24
 130:	b0 01       	movw	r22, r0
 132:	c9 9e       	mul	r12, r25
 134:	70 0d       	add	r23, r0
 136:	d8 9e       	mul	r13, r24
 138:	70 0d       	add	r23, r0
 13a:	11 24       	eor	r1, r1
 13c:	ec e3       	ldi	r30, 0x3C	; 60
 13e:	e6 9f       	mul	r30, r22
 140:	90 01       	movw	r18, r0
 142:	e7 9f       	mul	r30, r23
 144:	30 0d       	add	r19, r0
 146:	11 24       	eor	r1, r1
 148:	42 0f       	add	r20, r18
 14a:	53 1f       	adc	r21, r19
 14c:	e8 9e       	mul	r14, r24
 14e:	80 01       	movw	r16, r0
 150:	e9 9e       	mul	r14, r25
 152:	10 0d       	add	r17, r0
 154:	f8 9e       	mul	r15, r24
 156:	10 0d       	add	r17, r0
 158:	11 24       	eor	r1, r1
 15a:	04 0f       	add	r16, r20
 15c:	15 1f       	adc	r17, r21
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	0e 94 5d 00 	call	0xba	; 0xba <sendCommand2LCD>
 164:	87 e8       	ldi	r24, 0x87	; 135
 166:	0e 94 5d 00 	call	0xba	; 0xba <sendCommand2LCD>
 16a:	ca e0       	ldi	r28, 0x0A	; 10
 16c:	d0 e0       	ldi	r29, 0x00	; 0
 16e:	c6 01       	movw	r24, r12
 170:	be 01       	movw	r22, r28
 172:	0e 94 a0 01 	call	0x340	; 0x340 <__divmodhi4>
 176:	d8 2e       	mov	r13, r24
 178:	cb 01       	movw	r24, r22
 17a:	be 01       	movw	r22, r28
 17c:	0e 94 a0 01 	call	0x340	; 0x340 <__divmodhi4>
 180:	80 5d       	subi	r24, 0xD0	; 208
 182:	0e 94 63 00 	call	0xc6	; 0xc6 <sendData2LCD>
 186:	80 e3       	ldi	r24, 0x30	; 48
 188:	8d 0d       	add	r24, r13
 18a:	0e 94 63 00 	call	0xc6	; 0xc6 <sendData2LCD>
 18e:	8a e3       	ldi	r24, 0x3A	; 58
 190:	0e 94 63 00 	call	0xc6	; 0xc6 <sendData2LCD>
 194:	c7 01       	movw	r24, r14
 196:	be 01       	movw	r22, r28
 198:	0e 94 a0 01 	call	0x340	; 0x340 <__divmodhi4>
 19c:	f8 2e       	mov	r15, r24
 19e:	cb 01       	movw	r24, r22
 1a0:	be 01       	movw	r22, r28
 1a2:	0e 94 a0 01 	call	0x340	; 0x340 <__divmodhi4>
 1a6:	80 5d       	subi	r24, 0xD0	; 208
 1a8:	0e 94 63 00 	call	0xc6	; 0xc6 <sendData2LCD>
 1ac:	80 e3       	ldi	r24, 0x30	; 48
 1ae:	8f 0d       	add	r24, r15
 1b0:	0e 94 63 00 	call	0xc6	; 0xc6 <sendData2LCD>
 1b4:	8a e3       	ldi	r24, 0x3A	; 58
 1b6:	0e 94 63 00 	call	0xc6	; 0xc6 <sendData2LCD>
 1ba:	c8 01       	movw	r24, r16
 1bc:	64 e6       	ldi	r22, 0x64	; 100
 1be:	70 e0       	ldi	r23, 0x00	; 0
 1c0:	0e 94 a0 01 	call	0x340	; 0x340 <__divmodhi4>
 1c4:	cb 01       	movw	r24, r22
 1c6:	be 01       	movw	r22, r28
 1c8:	0e 94 a0 01 	call	0x340	; 0x340 <__divmodhi4>
 1cc:	80 5d       	subi	r24, 0xD0	; 208
 1ce:	0e 94 63 00 	call	0xc6	; 0xc6 <sendData2LCD>
 1d2:	c8 01       	movw	r24, r16
 1d4:	be 01       	movw	r22, r28
 1d6:	0e 94 a0 01 	call	0x340	; 0x340 <__divmodhi4>
 1da:	18 2f       	mov	r17, r24
 1dc:	cb 01       	movw	r24, r22
 1de:	be 01       	movw	r22, r28
 1e0:	0e 94 a0 01 	call	0x340	; 0x340 <__divmodhi4>
 1e4:	80 5d       	subi	r24, 0xD0	; 208
 1e6:	0e 94 63 00 	call	0xc6	; 0xc6 <sendData2LCD>
 1ea:	80 e3       	ldi	r24, 0x30	; 48
 1ec:	81 0f       	add	r24, r17
 1ee:	0e 94 63 00 	call	0xc6	; 0xc6 <sendData2LCD>
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	1f 91       	pop	r17
 1f8:	0f 91       	pop	r16
 1fa:	ff 90       	pop	r15
 1fc:	ef 90       	pop	r14
 1fe:	df 90       	pop	r13
 200:	cf 90       	pop	r12
 202:	08 95       	ret

00000204 <initLCD>:
}
/* Initialize the LCD with predefined sequence */
void initLCD(void)
{
	LCD_CTRL_PORT_DATA &= ~(1<<RS_PIN);
 204:	2b 98       	cbi	0x05, 3	; 5
	LCD_CTRL_PORT_DATA &= ~(1<<E_PIN);
 206:	2a 98       	cbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 208:	2f ef       	ldi	r18, 0xFF	; 255
 20a:	89 ef       	ldi	r24, 0xF9	; 249
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	21 50       	subi	r18, 0x01	; 1
 210:	80 40       	sbci	r24, 0x00	; 0
 212:	90 40       	sbci	r25, 0x00	; 0
 214:	e1 f7       	brne	.-8      	; 0x20e <initLCD+0xa>
 216:	00 c0       	rjmp	.+0      	; 0x218 <initLCD+0x14>
 218:	00 00       	nop
	_delay_ms(20);
	/*--Reset process from data sheet--*/
	sendCommand2LCD(0x30);
 21a:	80 e3       	ldi	r24, 0x30	; 48
 21c:	0e 94 5d 00 	call	0xba	; 0xba <sendCommand2LCD>
 220:	8f e1       	ldi	r24, 0x1F	; 31
 222:	9e e4       	ldi	r25, 0x4E	; 78
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <initLCD+0x20>
 228:	00 c0       	rjmp	.+0      	; 0x22a <initLCD+0x26>
 22a:	00 00       	nop
	_delay_ms(5);
	sendCommand2LCD(0x30);
 22c:	80 e3       	ldi	r24, 0x30	; 48
 22e:	0e 94 5d 00 	call	0xba	; 0xba <sendCommand2LCD>
 232:	8f e9       	ldi	r24, 0x9F	; 159
 234:	9f e0       	ldi	r25, 0x0F	; 15
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <initLCD+0x32>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <initLCD+0x38>
 23c:	00 00       	nop
	_delay_ms(1);
	sendCommand2LCD(0x30);	
 23e:	80 e3       	ldi	r24, 0x30	; 48
 240:	0e 94 5d 00 	call	0xba	; 0xba <sendCommand2LCD>
 244:	8f e3       	ldi	r24, 0x3F	; 63
 246:	9c e9       	ldi	r25, 0x9C	; 156
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <initLCD+0x44>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <initLCD+0x4a>
 24e:	00 00       	nop
	_delay_ms(10);
	/*---------------------------------*/
	sendCommand2LCD(0x38);    //function set
 250:	88 e3       	ldi	r24, 0x38	; 56
 252:	0e 94 5d 00 	call	0xba	; 0xba <sendCommand2LCD>
	sendCommand2LCD(0x0C);    //display on,cursor off,blink off
 256:	8c e0       	ldi	r24, 0x0C	; 12
 258:	0e 94 5d 00 	call	0xba	; 0xba <sendCommand2LCD>
	sendCommand2LCD(0x01);    //clear display
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	0e 94 5d 00 	call	0xba	; 0xba <sendCommand2LCD>
	sendCommand2LCD(0x06);    //entry mode, set increment
 262:	86 e0       	ldi	r24, 0x06	; 6
 264:	0e 94 5d 00 	call	0xba	; 0xba <sendCommand2LCD>
 268:	08 95       	ret

0000026a <init_timer1_comp_interrupt>:
}

void init_timer1_comp_interrupt(void)
{
	TCNT1 = 0x00;
 26a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 26e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	TIMSK1 |= 0x02;
 272:	ef e6       	ldi	r30, 0x6F	; 111
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	82 60       	ori	r24, 0x02	; 2
 27a:	80 83       	st	Z, r24
	TCCR1A &= 0xFC; TCCR1B |= 0x08; TCCR1B &= 0xEF;
 27c:	e0 e8       	ldi	r30, 0x80	; 128
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	80 81       	ld	r24, Z
 282:	8c 7f       	andi	r24, 0xFC	; 252
 284:	80 83       	st	Z, r24
 286:	e1 e8       	ldi	r30, 0x81	; 129
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 81       	ld	r24, Z
 28c:	88 60       	ori	r24, 0x08	; 8
 28e:	80 83       	st	Z, r24
 290:	80 81       	ld	r24, Z
 292:	8f 7e       	andi	r24, 0xEF	; 239
 294:	80 83       	st	Z, r24
	TCCR1B |= 0x05; TCCR1B &= 0xFC;
 296:	80 81       	ld	r24, Z
 298:	85 60       	ori	r24, 0x05	; 5
 29a:	80 83       	st	Z, r24
 29c:	80 81       	ld	r24, Z
 29e:	8c 7f       	andi	r24, 0xFC	; 252
 2a0:	80 83       	st	Z, r24
	OCR1A = 15625;
 2a2:	89 e0       	ldi	r24, 0x09	; 9
 2a4:	9d e3       	ldi	r25, 0x3D	; 61
 2a6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 2aa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 2ae:	08 95       	ret

000002b0 <main>:
}
/******************************************************/
/******************************************************/
void hardwareInit(void)
{
	hardwareInitLCD();
 2b0:	0e 94 48 00 	call	0x90	; 0x90 <hardwareInitLCD>

int main(void)
{
	hardwareInit(); /* All hardware configurations should go here */
	
	initLCD();			/* Initialize the LCD with predefined sequence */
 2b4:	0e 94 02 01 	call	0x204	; 0x204 <initLCD>
}
/* Set the cursor to Row, Column of the LCD */
void setCursorLCD(char a, char b)
{
	if(a == 1)
	sendCommand2LCD(0x80 + b);
 2b8:	81 e8       	ldi	r24, 0x81	; 129
 2ba:	0e 94 5d 00 	call	0xba	; 0xba <sendCommand2LCD>
{
	hardwareInit(); /* All hardware configurations should go here */
	
	initLCD();			/* Initialize the LCD with predefined sequence */
	setCursorLCD(1,1);	/* Set the cursor to Row1 Column1 of the LCD */
	sendData2LCD('S');	/* Display character S */
 2be:	83 e5       	ldi	r24, 0x53	; 83
 2c0:	0e 94 63 00 	call	0xc6	; 0xc6 <sendData2LCD>
	sendData2LCD('T');  /* Display character T */
 2c4:	84 e5       	ldi	r24, 0x54	; 84
 2c6:	0e 94 63 00 	call	0xc6	; 0xc6 <sendData2LCD>
	sendData2LCD('A');  /* Display character A */
 2ca:	81 e4       	ldi	r24, 0x41	; 65
 2cc:	0e 94 63 00 	call	0xc6	; 0xc6 <sendData2LCD>
	sendData2LCD('R');  /* Display character R */
 2d0:	82 e5       	ldi	r24, 0x52	; 82
 2d2:	0e 94 63 00 	call	0xc6	; 0xc6 <sendData2LCD>
	sendData2LCD('T');  /* Display character T */
 2d6:	84 e5       	ldi	r24, 0x54	; 84
 2d8:	0e 94 63 00 	call	0xc6	; 0xc6 <sendData2LCD>
	
	init_timer1_comp_interrupt();
 2dc:	0e 94 35 01 	call	0x26a	; 0x26a <init_timer1_comp_interrupt>
	sei();
 2e0:	78 94       	sei
 2e2:	ff cf       	rjmp	.-2      	; 0x2e2 <main+0x32>

000002e4 <__vector_11>:
	TCCR1B |= 0x05; TCCR1B &= 0xFC;
	OCR1A = 15625;
}

ISR (TIMER1_COMPA_vect)
{
 2e4:	1f 92       	push	r1
 2e6:	0f 92       	push	r0
 2e8:	0f b6       	in	r0, 0x3f	; 63
 2ea:	0f 92       	push	r0
 2ec:	11 24       	eor	r1, r1
 2ee:	2f 93       	push	r18
 2f0:	3f 93       	push	r19
 2f2:	4f 93       	push	r20
 2f4:	5f 93       	push	r21
 2f6:	6f 93       	push	r22
 2f8:	7f 93       	push	r23
 2fa:	8f 93       	push	r24
 2fc:	9f 93       	push	r25
 2fe:	af 93       	push	r26
 300:	bf 93       	push	r27
 302:	ef 93       	push	r30
 304:	ff 93       	push	r31
	count = count + 250;
 306:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 30a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 30e:	86 50       	subi	r24, 0x06	; 6
 310:	9f 4f       	sbci	r25, 0xFF	; 255
 312:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 316:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	displayValue(count);
 31a:	0e 94 69 00 	call	0xd2	; 0xd2 <displayValue>
 31e:	ff 91       	pop	r31
 320:	ef 91       	pop	r30
 322:	bf 91       	pop	r27
 324:	af 91       	pop	r26
 326:	9f 91       	pop	r25
 328:	8f 91       	pop	r24
 32a:	7f 91       	pop	r23
 32c:	6f 91       	pop	r22
 32e:	5f 91       	pop	r21
 330:	4f 91       	pop	r20
 332:	3f 91       	pop	r19
 334:	2f 91       	pop	r18
 336:	0f 90       	pop	r0
 338:	0f be       	out	0x3f, r0	; 63
 33a:	0f 90       	pop	r0
 33c:	1f 90       	pop	r1
 33e:	18 95       	reti

00000340 <__divmodhi4>:
 340:	97 fb       	bst	r25, 7
 342:	07 2e       	mov	r0, r23
 344:	16 f4       	brtc	.+4      	; 0x34a <__divmodhi4+0xa>
 346:	00 94       	com	r0
 348:	07 d0       	rcall	.+14     	; 0x358 <__divmodhi4_neg1>
 34a:	77 fd       	sbrc	r23, 7
 34c:	09 d0       	rcall	.+18     	; 0x360 <__divmodhi4_neg2>
 34e:	0e 94 c3 01 	call	0x386	; 0x386 <__udivmodhi4>
 352:	07 fc       	sbrc	r0, 7
 354:	05 d0       	rcall	.+10     	; 0x360 <__divmodhi4_neg2>
 356:	3e f4       	brtc	.+14     	; 0x366 <__divmodhi4_exit>

00000358 <__divmodhi4_neg1>:
 358:	90 95       	com	r25
 35a:	81 95       	neg	r24
 35c:	9f 4f       	sbci	r25, 0xFF	; 255
 35e:	08 95       	ret

00000360 <__divmodhi4_neg2>:
 360:	70 95       	com	r23
 362:	61 95       	neg	r22
 364:	7f 4f       	sbci	r23, 0xFF	; 255

00000366 <__divmodhi4_exit>:
 366:	08 95       	ret

00000368 <__umulhisi3>:
 368:	a2 9f       	mul	r26, r18
 36a:	b0 01       	movw	r22, r0
 36c:	b3 9f       	mul	r27, r19
 36e:	c0 01       	movw	r24, r0
 370:	a3 9f       	mul	r26, r19
 372:	70 0d       	add	r23, r0
 374:	81 1d       	adc	r24, r1
 376:	11 24       	eor	r1, r1
 378:	91 1d       	adc	r25, r1
 37a:	b2 9f       	mul	r27, r18
 37c:	70 0d       	add	r23, r0
 37e:	81 1d       	adc	r24, r1
 380:	11 24       	eor	r1, r1
 382:	91 1d       	adc	r25, r1
 384:	08 95       	ret

00000386 <__udivmodhi4>:
 386:	aa 1b       	sub	r26, r26
 388:	bb 1b       	sub	r27, r27
 38a:	51 e1       	ldi	r21, 0x11	; 17
 38c:	07 c0       	rjmp	.+14     	; 0x39c <__udivmodhi4_ep>

0000038e <__udivmodhi4_loop>:
 38e:	aa 1f       	adc	r26, r26
 390:	bb 1f       	adc	r27, r27
 392:	a6 17       	cp	r26, r22
 394:	b7 07       	cpc	r27, r23
 396:	10 f0       	brcs	.+4      	; 0x39c <__udivmodhi4_ep>
 398:	a6 1b       	sub	r26, r22
 39a:	b7 0b       	sbc	r27, r23

0000039c <__udivmodhi4_ep>:
 39c:	88 1f       	adc	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	5a 95       	dec	r21
 3a2:	a9 f7       	brne	.-22     	; 0x38e <__udivmodhi4_loop>
 3a4:	80 95       	com	r24
 3a6:	90 95       	com	r25
 3a8:	bc 01       	movw	r22, r24
 3aa:	cd 01       	movw	r24, r26
 3ac:	08 95       	ret

000003ae <_exit>:
 3ae:	f8 94       	cli

000003b0 <__stop_program>:
 3b0:	ff cf       	rjmp	.-2      	; 0x3b0 <__stop_program>
