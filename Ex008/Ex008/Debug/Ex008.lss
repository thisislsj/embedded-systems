
Ex008.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000039a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000326  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800100  00800100  0000039a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000039a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000095a  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000733  00000000  00000000  00000dc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ef  00000000  00000000  000014f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  000018e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000418  00000000  00000000  000019a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000120  00000000  00000000  00001db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001ed8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	aa 30       	cpi	r26, 0x0A	; 10
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 76 00 	call	0xec	; 0xec <main>
  88:	0c 94 91 01 	jmp	0x322	; 0x322 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <LED_ON>:
	ADCSRA |= (1<< ADSC);
	
	while (ADCSRA & (1<<ADSC));
	
	return ADC;
}
  90:	2d 9a       	sbi	0x05, 5	; 5
  92:	08 95       	ret

00000094 <LED_OFF>:
  94:	2d 98       	cbi	0x05, 5	; 5
  96:	08 95       	ret

00000098 <LED_PORT_CONFIG>:
  98:	25 9a       	sbi	0x04, 5	; 4
  9a:	08 95       	ret

0000009c <EnableADC>:
  9c:	ea e7       	ldi	r30, 0x7A	; 122
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	80 68       	ori	r24, 0x80	; 128
  a4:	80 83       	st	Z, r24
  a6:	80 81       	ld	r24, Z
  a8:	87 60       	ori	r24, 0x07	; 7
  aa:	80 83       	st	Z, r24
  ac:	ac e7       	ldi	r26, 0x7C	; 124
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	8c 91       	ld	r24, X
  b2:	80 7f       	andi	r24, 0xF0	; 240
  b4:	8c 93       	st	X, r24
  b6:	80 81       	ld	r24, Z
  b8:	88 60       	ori	r24, 0x08	; 8
  ba:	80 83       	st	Z, r24
  bc:	78 94       	sei
  be:	80 81       	ld	r24, Z
  c0:	80 64       	ori	r24, 0x40	; 64
  c2:	80 83       	st	Z, r24
  c4:	08 95       	ret

000000c6 <USART_Init>:

void USART_Init(unsigned int ubrr){
	UBRR0H= (unsigned char)(ubrr>>8);
  c6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L=(unsigned char)ubrr;
  ca:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0B=(1<< RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
  ce:	88 e9       	ldi	r24, 0x98	; 152
  d0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C=(3<<UCSZ00);
  d4:	86 e0       	ldi	r24, 0x06	; 6
  d6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
  da:	08 95       	ret

000000dc <USART_Transmit>:
}

void USART_Transmit(unsigned char data){
	while(!(UCSR0A & (1<<UDRE0)));
  dc:	e0 ec       	ldi	r30, 0xC0	; 192
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	90 81       	ld	r25, Z
  e2:	95 ff       	sbrs	r25, 5
  e4:	fd cf       	rjmp	.-6      	; 0xe0 <USART_Transmit+0x4>
	UDR0=data;
  e6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  ea:	08 95       	ret

000000ec <main>:
volatile unsigned int previous=0;


int main(void)
{
    LED_PORT_CONFIG();
  ec:	0e 94 4c 00 	call	0x98	; 0x98 <LED_PORT_CONFIG>
	LED_OFF();
  f0:	0e 94 4a 00 	call	0x94	; 0x94 <LED_OFF>
	USART_Init(MYUBRR);
  f4:	87 e6       	ldi	r24, 0x67	; 103
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 63 00 	call	0xc6	; 0xc6 <USART_Init>
	EnableADC();
  fc:	0e 94 4e 00 	call	0x9c	; 0x9c <EnableADC>
				USART_Transmit(0x30+V0);
				USART_Transmit(0x0A); USART_Transmit(0x0D);
				previous=valueADC;
				LED_ON();
				_delay_ms(500);
				ADCSRA |= (1<<ADSC);
 100:	ca e7       	ldi	r28, 0x7A	; 122
 102:	d0 e0       	ldi	r29, 0x00	; 0
	LED_OFF();
	USART_Init(MYUBRR);
	EnableADC();
    while (1) 
    {
		if (flagADC==1){
 104:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <flagADC>
 108:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <flagADC+0x1>
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	d1 f7       	brne	.-12     	; 0x104 <main+0x18>
			flagADC=0;
 110:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <flagADC+0x1>
 114:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <flagADC>
			LED_OFF();
 118:	0e 94 4a 00 	call	0x94	; 0x94 <LED_OFF>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	2f ef       	ldi	r18, 0xFF	; 255
 11e:	39 e6       	ldi	r19, 0x69	; 105
 120:	88 e1       	ldi	r24, 0x18	; 24
 122:	21 50       	subi	r18, 0x01	; 1
 124:	30 40       	sbci	r19, 0x00	; 0
 126:	80 40       	sbci	r24, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <main+0x36>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0x40>
 12c:	00 00       	nop
			_delay_ms(500);
			
			
			
				USART_Transmit('>');
 12e:	8e e3       	ldi	r24, 0x3E	; 62
 130:	0e 94 6e 00 	call	0xdc	; 0xdc <USART_Transmit>
				V0=valueADC%10;
 134:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <valueADC>
 138:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <valueADC+0x1>
 13c:	9a 01       	movw	r18, r20
 13e:	ad ec       	ldi	r26, 0xCD	; 205
 140:	bc ec       	ldi	r27, 0xCC	; 204
 142:	0e 94 82 01 	call	0x304	; 0x304 <__umulhisi3>
 146:	96 95       	lsr	r25
 148:	87 95       	ror	r24
 14a:	96 95       	lsr	r25
 14c:	87 95       	ror	r24
 14e:	96 95       	lsr	r25
 150:	87 95       	ror	r24
 152:	9c 01       	movw	r18, r24
 154:	22 0f       	add	r18, r18
 156:	33 1f       	adc	r19, r19
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	82 0f       	add	r24, r18
 166:	93 1f       	adc	r25, r19
 168:	48 1b       	sub	r20, r24
 16a:	59 0b       	sbc	r21, r25
 16c:	40 93 05 01 	sts	0x0105, r20	; 0x800105 <V0>
				V1=(valueADC/10)%10;
 170:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <valueADC>
 174:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <valueADC+0x1>
 178:	0e 94 82 01 	call	0x304	; 0x304 <__umulhisi3>
 17c:	ac 01       	movw	r20, r24
 17e:	56 95       	lsr	r21
 180:	47 95       	ror	r20
 182:	56 95       	lsr	r21
 184:	47 95       	ror	r20
 186:	56 95       	lsr	r21
 188:	47 95       	ror	r20
 18a:	9a 01       	movw	r18, r20
 18c:	0e 94 82 01 	call	0x304	; 0x304 <__umulhisi3>
 190:	96 95       	lsr	r25
 192:	87 95       	ror	r24
 194:	96 95       	lsr	r25
 196:	87 95       	ror	r24
 198:	96 95       	lsr	r25
 19a:	87 95       	ror	r24
 19c:	9c 01       	movw	r18, r24
 19e:	22 0f       	add	r18, r18
 1a0:	33 1f       	adc	r19, r19
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	82 0f       	add	r24, r18
 1b0:	93 1f       	adc	r25, r19
 1b2:	48 1b       	sub	r20, r24
 1b4:	59 0b       	sbc	r21, r25
 1b6:	40 93 04 01 	sts	0x0104, r20	; 0x800104 <V1>
				V2=(valueADC/100)%10;
 1ba:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <valueADC>
 1be:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <valueADC+0x1>
 1c2:	36 95       	lsr	r19
 1c4:	27 95       	ror	r18
 1c6:	36 95       	lsr	r19
 1c8:	27 95       	ror	r18
 1ca:	ab e7       	ldi	r26, 0x7B	; 123
 1cc:	b4 e1       	ldi	r27, 0x14	; 20
 1ce:	0e 94 82 01 	call	0x304	; 0x304 <__umulhisi3>
 1d2:	ac 01       	movw	r20, r24
 1d4:	56 95       	lsr	r21
 1d6:	47 95       	ror	r20
 1d8:	9a 01       	movw	r18, r20
 1da:	ad ec       	ldi	r26, 0xCD	; 205
 1dc:	bc ec       	ldi	r27, 0xCC	; 204
 1de:	0e 94 82 01 	call	0x304	; 0x304 <__umulhisi3>
 1e2:	96 95       	lsr	r25
 1e4:	87 95       	ror	r24
 1e6:	96 95       	lsr	r25
 1e8:	87 95       	ror	r24
 1ea:	96 95       	lsr	r25
 1ec:	87 95       	ror	r24
 1ee:	9c 01       	movw	r18, r24
 1f0:	22 0f       	add	r18, r18
 1f2:	33 1f       	adc	r19, r19
 1f4:	88 0f       	add	r24, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	82 0f       	add	r24, r18
 202:	93 1f       	adc	r25, r19
 204:	48 1b       	sub	r20, r24
 206:	59 0b       	sbc	r21, r25
 208:	40 93 03 01 	sts	0x0103, r20	; 0x800103 <V2>
				V3=(valueADC/1000)%10;
 20c:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <valueADC>
 210:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <valueADC+0x1>
 214:	36 95       	lsr	r19
 216:	27 95       	ror	r18
 218:	36 95       	lsr	r19
 21a:	27 95       	ror	r18
 21c:	36 95       	lsr	r19
 21e:	27 95       	ror	r18
 220:	a5 ec       	ldi	r26, 0xC5	; 197
 222:	b0 e2       	ldi	r27, 0x20	; 32
 224:	0e 94 82 01 	call	0x304	; 0x304 <__umulhisi3>
 228:	ac 01       	movw	r20, r24
 22a:	52 95       	swap	r21
 22c:	42 95       	swap	r20
 22e:	4f 70       	andi	r20, 0x0F	; 15
 230:	45 27       	eor	r20, r21
 232:	5f 70       	andi	r21, 0x0F	; 15
 234:	45 27       	eor	r20, r21
 236:	9a 01       	movw	r18, r20
 238:	ad ec       	ldi	r26, 0xCD	; 205
 23a:	bc ec       	ldi	r27, 0xCC	; 204
 23c:	0e 94 82 01 	call	0x304	; 0x304 <__umulhisi3>
 240:	96 95       	lsr	r25
 242:	87 95       	ror	r24
 244:	96 95       	lsr	r25
 246:	87 95       	ror	r24
 248:	96 95       	lsr	r25
 24a:	87 95       	ror	r24
 24c:	9c 01       	movw	r18, r24
 24e:	22 0f       	add	r18, r18
 250:	33 1f       	adc	r19, r19
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	82 0f       	add	r24, r18
 260:	93 1f       	adc	r25, r19
 262:	9a 01       	movw	r18, r20
 264:	28 1b       	sub	r18, r24
 266:	39 0b       	sbc	r19, r25
 268:	c9 01       	movw	r24, r18
 26a:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <V3>
				USART_Transmit(0x30+V3);
 26e:	80 5d       	subi	r24, 0xD0	; 208
 270:	0e 94 6e 00 	call	0xdc	; 0xdc <USART_Transmit>
				USART_Transmit(0x30+V2);
 274:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <V2>
 278:	80 5d       	subi	r24, 0xD0	; 208
 27a:	0e 94 6e 00 	call	0xdc	; 0xdc <USART_Transmit>
				USART_Transmit(0x30+V1);
 27e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <V1>
 282:	80 5d       	subi	r24, 0xD0	; 208
 284:	0e 94 6e 00 	call	0xdc	; 0xdc <USART_Transmit>
				USART_Transmit(0x30+V0);
 288:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <V0>
 28c:	80 5d       	subi	r24, 0xD0	; 208
 28e:	0e 94 6e 00 	call	0xdc	; 0xdc <USART_Transmit>
				USART_Transmit(0x0A); USART_Transmit(0x0D);
 292:	8a e0       	ldi	r24, 0x0A	; 10
 294:	0e 94 6e 00 	call	0xdc	; 0xdc <USART_Transmit>
 298:	8d e0       	ldi	r24, 0x0D	; 13
 29a:	0e 94 6e 00 	call	0xdc	; 0xdc <USART_Transmit>
				previous=valueADC;
 29e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <valueADC>
 2a2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <valueADC+0x1>
 2a6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 2aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
				LED_ON();
 2ae:	0e 94 48 00 	call	0x90	; 0x90 <LED_ON>
 2b2:	3f ef       	ldi	r19, 0xFF	; 255
 2b4:	89 e6       	ldi	r24, 0x69	; 105
 2b6:	98 e1       	ldi	r25, 0x18	; 24
 2b8:	31 50       	subi	r19, 0x01	; 1
 2ba:	80 40       	sbci	r24, 0x00	; 0
 2bc:	90 40       	sbci	r25, 0x00	; 0
 2be:	e1 f7       	brne	.-8      	; 0x2b8 <main+0x1cc>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <main+0x1d6>
 2c2:	00 00       	nop
				_delay_ms(500);
				ADCSRA |= (1<<ADSC);
 2c4:	88 81       	ld	r24, Y
 2c6:	80 64       	ori	r24, 0x40	; 64
 2c8:	88 83       	st	Y, r24
 2ca:	1c cf       	rjmp	.-456    	; 0x104 <main+0x18>

000002cc <__vector_21>:
void USART_Transmit(unsigned char data){
	while(!(UCSR0A & (1<<UDRE0)));
	UDR0=data;
}

ISR(ADC_vect){
 2cc:	1f 92       	push	r1
 2ce:	0f 92       	push	r0
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	0f 92       	push	r0
 2d4:	11 24       	eor	r1, r1
 2d6:	8f 93       	push	r24
 2d8:	9f 93       	push	r25
	valueADC=ADC;
 2da:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 2de:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 2e2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <valueADC+0x1>
 2e6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <valueADC>
	flagADC=1;
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <flagADC+0x1>
 2f2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <flagADC>
}
 2f6:	9f 91       	pop	r25
 2f8:	8f 91       	pop	r24
 2fa:	0f 90       	pop	r0
 2fc:	0f be       	out	0x3f, r0	; 63
 2fe:	0f 90       	pop	r0
 300:	1f 90       	pop	r1
 302:	18 95       	reti

00000304 <__umulhisi3>:
 304:	a2 9f       	mul	r26, r18
 306:	b0 01       	movw	r22, r0
 308:	b3 9f       	mul	r27, r19
 30a:	c0 01       	movw	r24, r0
 30c:	a3 9f       	mul	r26, r19
 30e:	70 0d       	add	r23, r0
 310:	81 1d       	adc	r24, r1
 312:	11 24       	eor	r1, r1
 314:	91 1d       	adc	r25, r1
 316:	b2 9f       	mul	r27, r18
 318:	70 0d       	add	r23, r0
 31a:	81 1d       	adc	r24, r1
 31c:	11 24       	eor	r1, r1
 31e:	91 1d       	adc	r25, r1
 320:	08 95       	ret

00000322 <_exit>:
 322:	f8 94       	cli

00000324 <__stop_program>:
 324:	ff cf       	rjmp	.-2      	; 0x324 <__stop_program>
