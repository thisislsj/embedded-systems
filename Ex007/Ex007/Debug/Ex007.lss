
Ex007.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000104  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000887  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ef  00000000  00000000  00000a97  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000345  00000000  00000000  00001186  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  000014cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c8  00000000  00000000  00001540  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006e  00000000  00000000  00001908  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001976  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  78:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <USART_Transmit>:
	//Set frame format: 8data
	UCSR0C=(3<<UCSZ00);
}

void USART_Transmit(unsigned char data){
	while(!(UCSR0A & (1<<UDRE0)));
  80:	e0 ec       	ldi	r30, 0xC0	; 192
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	90 81       	ld	r25, Z
  86:	95 ff       	sbrs	r25, 5
  88:	fd cf       	rjmp	.-6      	; 0x84 <USART_Transmit+0x4>
	UDR0=data;
  8a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  8e:	08 95       	ret

00000090 <LED_ON>:
}

void LED_ON(void){
	PORTB |= 0B00100000;
  90:	2d 9a       	sbi	0x05, 5	; 5
  92:	08 95       	ret

00000094 <LED_OFF>:
}

void LED_OFF(void){
	PORTB &= 0B11011111;
  94:	2d 98       	cbi	0x05, 5	; 5
  96:	08 95       	ret

00000098 <LED_PORT_CONFIG>:
}

void LED_PORT_CONFIG(void){
	DDRB |= 0B00100000;
  98:	25 9a       	sbi	0x04, 5	; 4
  9a:	08 95       	ret

0000009c <main>:
}

int main(void)
{
    LED_PORT_CONFIG();
  9c:	0e 94 4c 00 	call	0x98	; 0x98 <LED_PORT_CONFIG>
	LED_OFF();
  a0:	0e 94 4a 00 	call	0x94	; 0x94 <LED_OFF>
	LED_ON();
  a4:	0e 94 48 00 	call	0x90	; 0x90 <LED_ON>
    while (1) 
    {
		LED_ON();
  a8:	0e 94 48 00 	call	0x90	; 0x90 <LED_ON>
		USART_Transmit('H');
  ac:	88 e4       	ldi	r24, 0x48	; 72
  ae:	0e 94 40 00 	call	0x80	; 0x80 <USART_Transmit>
		USART_Transmit('E');
  b2:	85 e4       	ldi	r24, 0x45	; 69
  b4:	0e 94 40 00 	call	0x80	; 0x80 <USART_Transmit>
		USART_Transmit('L');
  b8:	8c e4       	ldi	r24, 0x4C	; 76
  ba:	0e 94 40 00 	call	0x80	; 0x80 <USART_Transmit>
		USART_Transmit('L');
  be:	8c e4       	ldi	r24, 0x4C	; 76
  c0:	0e 94 40 00 	call	0x80	; 0x80 <USART_Transmit>
		USART_Transmit('O');
  c4:	8f e4       	ldi	r24, 0x4F	; 79
  c6:	0e 94 40 00 	call	0x80	; 0x80 <USART_Transmit>
		USART_Transmit(0x0A); USART_Transmit(0x0D);
  ca:	8a e0       	ldi	r24, 0x0A	; 10
  cc:	0e 94 40 00 	call	0x80	; 0x80 <USART_Transmit>
  d0:	8d e0       	ldi	r24, 0x0D	; 13
  d2:	0e 94 40 00 	call	0x80	; 0x80 <USART_Transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	2f ef       	ldi	r18, 0xFF	; 255
  d8:	84 e3       	ldi	r24, 0x34	; 52
  da:	9c e0       	ldi	r25, 0x0C	; 12
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <main+0x40>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x4a>
  e6:	00 00       	nop
		_delay_ms(250);
		LED_OFF();
  e8:	0e 94 4a 00 	call	0x94	; 0x94 <LED_OFF>
  ec:	2f ef       	ldi	r18, 0xFF	; 255
  ee:	84 e3       	ldi	r24, 0x34	; 52
  f0:	9c e0       	ldi	r25, 0x0C	; 12
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x56>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x60>
  fc:	00 00       	nop
  fe:	d4 cf       	rjmp	.-88     	; 0xa8 <main+0xc>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
